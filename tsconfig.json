{
  "compilerOptions": {
    "jsx": "preserve",
    /* Visit https://aka.ms/tsconfig.json to read more about this file */
    /* Language and Environment */
    "target": "ES2021", /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "experimentalDecorators": true, /* Enable experimental support for TC39 stage 2 draft decorators. */
    /* Modules */
    "module": "Node16", /* Specify what module code is generated. */
    "rootDir": "./src", /* Specify the root folder within your source files. */
    "moduleResolution": "node16", /* Specify how TypeScript looks up a file from a given module specifier. */
    "baseUrl": "./src", /* Specify the base directory to resolve non-relative module names. */
    "resolveJsonModule": true, /* Enable importing .json files */
    /* JavaScript Support */
    "allowJs": true, /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
    "checkJs": true, /* Enable error reporting in type-checked JavaScript files. */
    /* Emit */
    "declaration": true, /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    "declarationMap": false, /* Create sourcemaps for d.ts files. */
    "sourceMap": true, /* Create source map files for emitted JavaScript files. */
    "outDir": "dist", /* Specify an output folder for all emitted files. */
    /* Interop Constraints */
    "allowSyntheticDefaultImports": true, /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true, /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    "forceConsistentCasingInFileNames": true, /* Ensure that casing is correct in imports. */
    /* Type Checking */
    "strict": false, /* Enable all strict type-checking options. */
    "noImplicitAny": false, /* Enable error reporting for expressions and declarations with an implied `any` type.. */
    "strictNullChecks": false, /* When type checking, take into account `null` and `undefined`. */
    "skipLibCheck": true, /* Skip type checking all .d.ts files. */
    "plugins": [
      /* CSS import - Step 0: npm instal -D typescript-plugin-css-modules */
      /* CSS import - Step 1: use local typescript server (.vscode/.code-workspace > settings): ++ "typescript.tsdk": "node_modules/typescript/lib" */
      /* CSS import - Step 2: add typescript-plugin-css-modules in  typescript's plugins config */
      {
        "name": "typescript-plugin-css-modules",
        "options": {
          "customMatcher": "\\.(atom|module)\\.css$", /* Match with *.atom.css or *.module.css */
        }
      }
    ]
  },
  "include": [
    "./src/**/**.*",
    "./node_modules/atomicreact-ts/types/css.d.ts", /* CSS import - Step 3: use global declarations modules for css */ ],
  "exclude": [
    "public",
    "dist"
  ],
  "ts-node": {
    "transpileOnly": true,
    "files": true,
    "experimentalResolver": true,
    "esm": true
  }
}